== About me ==
I'm a bored teenager who has a laptop (with Windows SP2, currently), an internet connection (fairly slow, so I wait a long time), and lots of free time. I program Java, [http://en.wikipedia.org/wiki/Zilog_Z80 z80 assembly] (ever heard of a TI calculator?), and some C and C++ (because of its similarity to Java). I am currently trying to learn more of C and C++, and C# so I can work on the level editor. I have a few ideas that will revolutionize (or so I think) level designing...

== Miscellaneous notes on SuperTux ==
I have a few interesting quirks of SuperTux that I discovered, so I post them here because there is no documentation (both in the source and on the wiki)
First, you are allowed to have multiple solid tilemaps. Their behavior is just as you'd expect; they overlay each other and perform no collision checking against themselves. (I have only tried this with them in different layers; I expect weird things happen when they have the same layer) This behavior is due to sector.cpp; It uses some sort of list or array called solid_tilemaps that it adds all solid tilemaps to. The next interesting thing is that tilemaps can have paths, which means in combination with the previous discovery they can be used as platforms and other similar things. There is an almost 1-to-1 correspondence between platforms and moving, solid tilemaps. Just one problem: There is no friction between the tilemap and Tux, except the normal friction one would experience on a still tilemap. So if you have a tilemap platform moving side-to-side, just jumping on it and staying will result in no movement except that produced by the user. Almost the same problem is produced by movement up and down. If the platform is moving down fast enough, then Tux will be continuously falling and cannot jump. (I was unable to turn this into an unjumpable apparently still platform in my experiments, however; the tilemap platform has to move enough to cause Tux to fall)
The other interesting note I had about paths (meaning moving tilemaps and platforms) was that they move towards a node only using that node and their current position as reference; it should thus be possible to get a platform that moves to roughly anywhere in a given shape by quickly executing a series <platform>.goto_node(x) calls in a script before the platform reaches node x; declare a box of nodes and use some sort of script to move it correctly.
Or, which is perhaps better and less of a hack, someone could just get the devs to add an extra node onto objects/path.cpp's array of nodes, which acts as a pseudo-node for an arbitrary place. The classes path, path_walker, platform, and tilemap then all add a method move(x, y, time) (as suggested in [[User_ideas#More_control_over_moving_platforms|user ideas]]) which sets the path's pseudo-node's x and y values to the parameters, node_mult to 1 \ time, and stop_at_node_nr to the pseudo-node's index. (I have it all planned out because I can read C(++) code, copy and modify it, but not write anything actually new. If I could write code, I would post a patch for adding this in a couple of days. I probably still will, but no guarantees on whether it works)
Phew!

== Current Projects ==
I have a fairly short attention span of a few months, during which I try to make a working (albeit roughish) program that does some cool thing.

Right now, I'm currently trying to write a converter for [http://www.ticalc.org/pub/83plus/asm/games/levels/mario/ these mario levels] that run under [http://www.ticalc.org/archives/files/fileinfo/192/19225.html this mario calculator game] to get a huge source of levels for SuperTux. I'll post the converter (written in Java) and my pick of the converted levels once I get it done.

I also have some ideas for the level editor that I'm trying to develop.

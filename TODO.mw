== Milestone 2 ==

Documents and ideas: [[Milestone 2]] esp. [[World 2]]

== Notes ==

{{Attention|s=Only developers should edit this page. Please add [[User ideas]] and [[Bugs]] to the end of their pages}}

'''High priority H:''' milestone goals that should be implemented for next milestone

'''Medium priority M:''' would be nice to have for next milestone, but should be secondary to high priority goals

'''Low priority L:''' things that should be fixed sometime

'''?:''' things that need to be discussed to determine whether or not they should be implemented

'''D:''' features that will be implemented but need further discussion on how to implement them

== Programming ==

=== Collision Detection ===
* '''M:''' Solve problems with Tux getting stuck in (and consequentially moved out of) unisolid tiles if they are at the apex of his jump
* '''M:''' Make moving platforms crush tux when pressed against a wall
* '''L:''' Stacking some objects doesn't work nicely. Examples: Multiple badguys above each other, multiple rocks above each other. It might be possible to solve this by doing collision detection against old object positions instead of the new ones.
* '''?:''' Solve problems with "solid" objects, e.g. Tux being propelled through bonus-type invisible blocks or Tux sometimes being thrown off platforms
** This doesn't seem to happen when the separate-axis collision detection for solid objects is replaced by the default algorithm
* '''?:''' Trigger collision callbacks for multiple solids that get hit at the same time, not just the "first" one
* '''?:''' Give tiles a configurable friction factor and make tux react to it. (for Icy tiles)

=== Code Refactoring/Cleanup ===
* '''L:''' Implement a remove_listener function, so that you can keep track when GameObject get added/removed to the Sector.
* '''L:''' name files according to the classes they contain, e.g. tile_manager.* to TileManager.* because it contains a class named TileManager and not tile_manager
* '''H:''' Related to renaming, restructure code to be more OOP-like.  Make scripting fairly automatic through inheritance.
::What do you mean by automatic scripting? What renaming? --[[User:WolfgangB|WolfgangB]] 15:44, 5 Jul 2006 (BST)
::Make it so that all you need to do expose an object at some basic level is to make it inherit from ScriptedObject or something similar.  As making everything OOP-like involves looking at every file, might as well rename them as the indicated just above. -- [[User:tuxdev|tuxdev]]
* '''L:''' Refactor worldmap code to run like a normal GameSession with some special GameObjects
* '''L:''' There are still some mainloops left outside the MainLoop class.
* '''D:''' Replace code that can cause buffer overflows

=== Actions ===

=== Scripting/Cutscenes ===
* '''H:''' extract translatable strings from the scripts
* '''M:''' Useful error messages. Report line and command that caused error.
* '''D:''' Ability to sync script with game, e.g. waiting until music has finished playing, waiting until Tux is on ground, ...

=== Badguys ===
* '''M:''' create more and better Badguys, see [[Badguys]] for ideas

=== Objects ===
* '''H:''' Don't simply duplicate code in the following objects: PoisonIvy, Spidermite?, Hatch, SkullTile
* '''H:''' Infobox: Don't show scroll arrows if the text is smaller than the box. Try pixelwise smooth scrolling instead of 1 line per keypress. Try to avoid scrolling textboxes anyway, players are bored if they have to read so much. Try to avoid infoboxes where possible, the game is played by lots of kids who either can't read yet or don't know english, they'll just be confused by text they can't understand.
**Infoboxes are really the only effective way to introduce gameplay elements.  For example, the run sign in "Welcome to Antartica" and the associated barrier are impassible for those who haven't figured out yet that the action key is the run key too.  Info boxes are not as evil as reading a manual, and gives information out at just the right time. Manuals can expose spoilers. -- tuxdev
** I agree. (Short) infoboxes are OK for tutorials. Regular levels should avoid them, though. --delta
* '''L:''' add a rope object on which tux is able to climb, also add a ? block that emits a rope when hit
* '''L:''' redo trampolines
** maybe we could instead introduce areas that accelerate Tux, Badguys and Particles in an arbitrary direction (i.e. wind). This could also replace unisolid tiles.
* '''L:''' add a "geysir" object: It's a fountain of water that raises in certain intervals. It can be used as jump-pad as the water gives tux and up-boost when standing on it.
* '''D:''' portable blocks emitting colored light. Other, colored blocks are only visible (and solid) in their range
* '''?:''' Doors that execute a script when Tux enters them

=== Optimisations ===

* '''L:''' Combine tiles into bigger images (worldmap and the waterfall tiles come to mind). This should improve load time and opengl speed a bit (because we need fewer texture changes).
* '''L:''' implement quadtree or grid to speedup collision detection

=== Miscellaneous ===
* '''M:''' Make sure levels for version 0.1.2 still work. Currently this isn't the case because some files have been renamed and other small stuff... Our levelmaking fans will be happy if they don't loose the ability to play their old levels.
* '''M:''' Tux did go up/down 1 or 2 pixels each step when walking around in the 0.1.x releases which made the walk look a bit more natural. I don't know if this was done intentionally or why it doesn't work anymore, but it would be nice to have this effect again.
* '''L:''' the camera does some nasty little jumps if you jumped up on a higher place where the camera didn't completely follow yet and you fall down directly again. This will suddenly raise the camera up.
* '''L:''' Add an option to tilemaps to fade away if tux stands behind tiles. (This is usefull to hide secret ways and entrances)
** For starters, being able to set a tilemap's opacity to 50% would suffice. Layering this semitransparent tilemap on an opaque one would achieve a similar effect
* '''M:''' Support multiple tilesets per level. This way users/modders can easily extend the tileset with by simply adding new .strf files into the data directory. Proposed format:
<pre>
  (supertux-level
    (name ...)
    ...
    (tileset
      (import (tileset "images/tilesets/snow.stts") (start 0) (end 50))
      (import (tileset "images/tilesets/stone.stts") (start 51) (end 102))
    )
    ...
    (sector
      (tilemap
        (ids 1 5 58 101 2 ...)
      )
    )
  )
</pre>
* '''D:''' think about icebullet specifics
* '''L:''' Try to avoid all random stuff in the game. There should be no calls to RandomGenerator in gameobjcts (at least the result
shouldn't affect the gamelogic at all)
* '''M:''' Option to delete or overwrite existing savegames. My five slots are all in world 2, Have to delete one to go back.
* '''L:''' Add line-editing functionality to Console
* '''L:''' Add "name" attribute to tilemaps

=== Statistics ===
* '''L:''' save score on per-level basis to make high-score (this means coins/time)
* '''M:''' Show statistics on level completion. 
* '''?:''' Show total count of coins collected in all levels on the worldmap
** initial implementation is there, however the screen should fade in (preferably a little later than the endsequence start)
** the screen should be displayed until the player presses a key (or a longer period of time like 15 seconds) is over
** statistics counting also doesn't seem to be correct yet
*** coins in bonus blocks are not counted
* load/save statistics

=== Sound ===
* '''?:''' Seems like a SoundSouce that was stopped cannot resume playing. Further investigation necessary.
* '''?:''' Pass reference distance to SoundManager::play(), e.g. 600px to reduce volume by 50% for every screen the sound is away from the player
* '''L:''' create more sound effects, see [[User_ideas#Sound_Effects]] for ideas
* '''L:''' ability to jump back at a specific position in a music file on loop (add .music files that describe the behaviour)
* '''L:''' Ability to run scripts that drive the music (ability to jump around the music file)

=== Bugs ===
* '''H:''' Check/Fix bullet speed/behaviour
** Please elaborate - what exactly needs to be checked or fixed?
* '''H:''' when finishing worldmap levels on a T-way tux starts running in a direction, while he should simply stay because he has several possibilities to continue. Also at the T-way that goes up, left, down tux doesn't seem to stop.
::''Can't reproduce that problem in r3692. Fixed?''
* '''H:''' In Scripts started by script_triggers the set_pos call has no effect because the scripts run during collision detection phase. We should somehow queue them and run the scripts next frame during the update phase.
** might be fixed now. MovingObject::set_pos now takes care of adjusting the CD "dest" member
* '''H:''' It seems like we get non-UTF8 strings from Windows error messages. SuperTux throws an exception when trying to render those in the console, handle this more gracefully and display ? instead
** Correctly convert strings we get from PHYSFS_getLastError() and SDL_GetError() to UTF-8
** PHYSFS_getLastError() returns the exact string it got from calling std::strerror(), so it uses the encoding implied by LC_MESSAGES. On Windows, this might be everything from Windows-1250 or ISO-8859-15 to Big5.
* '''?:''' Music loops during Endsequence
* '''?:''' If you bump a bonus block at the same time as you flip a level the bonus block slides down in a odd way. (for example test in world2/christoph1.stl)
* '''M:''' Console is affected by lightmap: Dark level --> dark console

== Levels ==
* '''H:''' create 10 or more [[Levels/World2|new levels]] of different size and complexity, using the new features of milestone 2.
* '''H:''' [[Levels/M2Test|Test existing Levels]] if they still work.

== Graphics ==
* '''D:''' remove "1up" from mini-Tux bonus
* '''H:''' add more forest tiles; some of the current ones need fixing.
* '''H:''' Create a ghost forest tileset.
* '''H:''' image for castle door with 5 key holes
* '''H:''' new tiles for the forest worldmap
* '''L:''' graphics for ropes
* '''L:''' graphics for bubbles and soap (not necessary for Milestone 2)
* '''?/D:''' new enemies (first need to be designed)
* '''?:''' for most level backgrounds, create three tileable image parts that tile like this:
 +-+-+
 |1|1|
 +-+-+
 |1|1|
 +-+-+
 |2|2|
 +-+-+
 |3|3|
 +-+-+
 |3|3|
 +-+-+

== Sounds ==
* '''?:''' See [[World_2#Atmosphere]] for more ambient sound ideas
* '''H:''' make some sound when the player dies and looses coins. So that you get some feedback what is going on.
* '''?:''' Wind (ambient) for high plateaus, over-the-clouds action, fast platforms, ...
* '''D:''' Short "Nolok" and "Tux" themed sound effects(?)
* '''?:''' Flapping for flying creatures (e.g. the Zeekling)
* '''?:''' soft "hop" sound for creatures like Jumpy or SkullyHop
* '''?:''' Crushing ice (Stalactite or breakable Ice tile)
* '''?:''' Warp sound for Hatch-style Dispenser
* '''?:''' Wooden "click" for Walking Totem
* '''?:''' Splash when jumping into water
* '''?:''' Sound when tux drinks a magic potion that flips the level around 
** that old sound from the flower? or better not ;-)
* '''?:''' Ambient sound for lava pits

== Music ==

== New Collision Detection ==
this is about the new-collision-detection branch (see [[Collision detection#New_Collision_Detection]])
* Concerning badguys:
** Snails that hit a wall above ground in "spinning" mode turns back into normal snails right below
** You can kill Igel from behind
** Jumping skull doesn't jump.
* Slopes
** No y-velocity adjustment yet when running slopes down
** In flipped levels you die if you jump against a slope (see world2/level2.stl for example)
* Rock object totally broken
* Spurious detection of horizontal crushs when jumping around a single ? block with walls nearby (see world2/level4 for example)
* That slide along code sometimes pushes you into a crush position (try in platforms.stl)
* rain is broken
* It doesn't build with --enable-debug on windows (it compiles fine with --enable-debug on my Linux box). You get this for several files: 
<pre>./src/collision_hit.hpp: In constructor `Constraints::Constraints()':
./src/collision_hit.hpp:77: warning: division by zero in `1.0e+0f / 0.'
./src/collision_hit.hpp:78: warning: division by zero in `1.0e+0f / 0.'
./src/collision_hit.hpp:79: warning: division by zero in `1.0e+0f / 0.'
./src/collision_hit.hpp:80: warning: division by zero in `1.0e+0f / 0.'
./src/collision_hit.hpp: In member function `bool Constraints::has_constraints() const':
./src/collision_hit.hpp:84: warning: division by zero in `1.0e+0f / 0.'
./src/collision_hit.hpp:84: warning: division by zero in `1.0e+0f / 0.'
./src/collision_hit.hpp:85: warning: division by zero in `1.0e+0f / 0.'
./src/collision_hit.hpp:85: warning: division by zero in `1.0e+0f / 0.'</pre>
* Sometimes I get this error (on windows only) in data/levels/world2/christoph6.stl near the door at the end of the secret area at the end:
<pre>Assertion failed: p1.x <= p2.x && p1.y <= p2.y, file ./src/math/rect.hpp, line 45

This application has requested the Runtime to terminate it in an unusual way.
Please contact the application's support team for more information.</pre>
I need a gdb backtrace to know where it happens! --[[User:MatzeB|MatzeB]] 21:40, 2 Jul 2006 (BST)
:Sorry but I don't manage to run gdb on windows, the system just locks up with 99% CPU usage. --[[User:AnMaster|AnMaster]] 19:40, 7 Jul 2006 (BST)
::But as far as I can see it happens at the end of slopes and when jumping in small areas. --[[User:AnMaster|AnMaster]] 19:46, 7 Jul 2006 (BST)

[[Category:Development]]

== Editor ==
(The editor is not release critical therefore no ratings for these TODOS)
* Scroll TileList with middle mouse, Get different Tilegroups
* Add scrollbars to tilelist widget
* Add scrollbars to level?
* Create an overview widget (where to place this in the GUI?)
* preserve unknown lisp trees
* Grab Mouse Pointer when scrolling so that we can scroll as much as we want
(and the mouse is still where it was before scrolling)
* More custom property editors:
** Sector selector
** Spawnpoint selector
** Texts
** Scripts (we had a very good gtksourceview based editor which is disabled at the moment, maybe split the editor to a separate dll and load different editors on demand?)
* Ask for Save on close/load/new
* The open dialog has an invalid folder selected when saving new maps and crashs (and also shows "open")
* When selecting File->New the filename is not resetted
* Support resizing of level with drag&drop on the level borders
* Support selection of multiple objects
* Layer switching on keys 1,2,3,...,0 CTRL+1,2,3,...,0 to switch visibility, key 0 for objects
* Editor crashs with out of memory, when you select a tile in the middle, right-click select and move the mouse too much to the right
* Redraw sector after loading, undo, delete
* Linebreaks in saved tilemaps?
* Tool not working after loading new level
* Windows builds seem to silently crash when loading huge levels
:huge as in 100x100 or more like 10000x10000?
:the level world2/airkey.stl crash both editor and the game itself on windows. --[[User:AnMaster|AnMaster]] 17:56, 30 Jun 2006 (BST)
::airkey is 300x300. It makes the editor slow on my linux box but it's working--[[User:WolfgangB|WolfgangB]] 00:14, 6 Jul 2006 (BST)
* Make the right click menu from sector tab a normal menu so that users can easily find it
* Show/hide background (button?)

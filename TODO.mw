== Milestone 2 ==

Documents and ideas: [[Milestone 2]] esp. [[Forest|Forest world]]

== Notes ==
'''High priority H:''' milestone goals that should be implemented for next milestone

'''Medium priority M:''' would be nice to have for next milestone, but should be secondary to high priority goals

'''Low priority L:''' things that should be fixed sometime

'''?:''' things that need to be discussed to determine whether or not they should be implemented

'''D:''' features that will be implemented but need further discussion on how to implement them

== Programming ==

=== Collision detection rewrite (H) ===
* implement ability to carry Mr. Iceblock (and other objects) around
* smoke clouds are too fast
* rethink slopes collision feedback... tux becomes too slow when walking up and starts jumping when walking down
* think about an attachement mechanism for moving platforms
* implement paths for the moving platform, implement simple moving platforms
* fix bullet speed/behaviour
* check if unducking is actually possible or if something is in the way
* what to do when stuck under tiles (after using duck-sliding)
* '''?:''' do we want multi hit scores again?

=== Code Refactoring/Cleanup/Optimisation ===
* '''M''' (or '''H'''?)''':''' implement quadtree or grid to speedup collision detection
* '''M:''' harmonize to 1 single gameloop that switches between title, worldmap, ingame mode and eventually leveleditor mode
* '''M:''' use refcounting for GameObjects and implement a remove_listener function, so that you can keep track when GameObject get added/removed to the Sector. (refcounting is needed here, otherwise we'll get into trouble when 1 of the listener objects dies before it gets notificated). Unregistering in the destructor would be an alternative solution but an error prone one.
* '''L:''' use [http://icculus.org/physfs physfs] for loading files
* '''L:''' change physics class y-velocity-coordinate to be like all other y-coordinates again (positive y to go down)
* '''L:''' name files according to the classes they contain, e.g. tile_manager.* to TileManager.* because it contains a class named TileManager and not tile_manager

=== Actions ===
* '''H:''' Buttjump:
** re-enable buttjump
** should kill enemies with a certain range (''needs to be tweaked'')
*** eventually, enemies in a given radius should only be stunned
** animation (need images)
** should only be available when tux is big
** should break bricks if Tux is on top of bricks.
* '''H:''' Flapping:
** should be modeled after Yoshi's Island flapping
** '''?:''' check if this doesn't heavily affect gameplay
** animation (need images)
* '''H:''' Blowflyer:
** should be temporarily active for a single sector or time-limited (i.e. countdown)
** '''D:''' we don't know yet how Tux could gain that ability; probably some non-movable objects in the level (helium bottles were rejected, should be something more "abstract")

=== Scripting/Cutscenes ===
* '''H:''' add a global variable store for scripts or something like that holds information across levels/scripts and save/load cycles.
* '''H:''' implement a lighting effect for nolok
* '''H:''' create a script for the intro cutscene
* '''H:''' make it possible to modify the worldmap after the yeti has been defeated
* '''H:''' extract translatable string from the scripts
* '''H:''' make it possible to load additional script files
* '''H:''' always load some standard script file that contains helper functions like wait
* '''H:''' write a bit of documentation about the scripting API (at least a sentence or two about each function)
* '''M:''' create a script for the yeti outro

=== Badguys ===
* '''H:''' bring back stay on platform flag
* '''H:''' reimplement fish
* '''H:''' do something with the wingling
* '''H:''' badguy squish code isn't perfect at the moment... you sometimes get hit althought you should have squished the badguy.
* '''L:''' iceblock should slide over one-space holes
* '''?:''' do something with the tree?

=== Objects ===
* '''H:''' create a "sound object" that is an object or area, that can be placed on the map and constantly plays a .wav file to improve game athmosphere. Good examples would be a water sound which can be placed at waterfalls, a kuckoo sound that can be placed into the wood, bubling sound for lava... The sound object should be configurable:
** to be position independent (always play);
** to have a spot position so that it gets louder when tux gets nearer to the spot (or a rectangular area instead of the spot?).
** you should be able to configure the sound to be constantly looped or to be played in some random fashion (ie. play and then 5-10 seconds pause).
* '''H:''' create a "sign" object, ie an object that can be placed on the level and contains messages (like the run sign we have at the moment but programmatically created so that we can translate it)
* '''H:''' add a simple rock object that can be carried around
* '''H:''' add a rope object on which tux is able to climb, also add a ? block that emits a rope when hit
* '''H:''' redo trampolines
* '''M:''' add a "geysir" object: It's a fountain of water that raises in certain intervals. It can be used as jump-pad as the water gives tux and up-boost when standing on it.
* '''L:''' make particle systems like rain react to solid objects.
* '''H:''' Create "potion" object. That comes out of BonusBlocks. Make the sprite of the potion configurable and make it possible to activate a script when the potion has been hit. The first thing we can use this is to have a red and a blue potion that flip the level/restore it to normal.
* '''H:''' Give tiles a configurable friction factor and make tux react to it. (for Icy tiles)

=== Miscellaneous ===
* '''M:''' save score on per-level basis to make high-score (this means coins/time)
* '''L:''' the camera does some nasty little jumps if you jumped up on a higher place where the camera didn't completely follow yet and you fall down directly again. This will suddenly raise the camera up.
* '''L:''' allow any object to be inside of a [?] box, ie. trampoline or badguy. Not sure if this would be gameplay wise.
* '''D:''' think about icebullet specifics

== Levels ==
* '''H:''' create 10-20 new levels of different size and complexity, using the new features of milestone 2.
* '''H:''' add compression to the level files, for example by gzipping them and/or delivering them inside .zip archives using PhysFS. Milestone 2 level files can get very large, and zipping them can reduce their size by more than 90 per cent.
* '''L:''' when loading bonus world before ever completing a level there, game prints <tt>Problem loading game '/home/$USER/.supertux/save/bonus1-slot1.stsg': Parser problem: Couldn't open file '/home/$USER/.supertux/save/bonus1-slot1.stsg'.</tt>

== Graphics ==
* '''H:''' image for InfoBox (that box you can jump against that shows you a message)
* '''H:''' add more forest tiles; some of the current ones need fixing. Also create a ghost forest tileset.
* '''H:''' animations for the [[Yeti]]
* '''H:''' images for 5 keys in the forest world
* '''H:''' image for castle door with 5 key holes
* '''H:''' new tiles for the forest worldmap
* '''H:''' image for marking reset points (maybe a bell that starts swinging once Tux touched it?)
* '''H:''' Potions in at least red and blue color (maybe more)
* '''L:''' graphics for ropes
* '''L:''' graphics for bubbles and soap (not necessary for Milestone 2)
* '''?/D:''' new enemies (first need to be designed)

== Beyond Milestone2 ==

* more things than just levels on the worldmap (similar to SMB3)
* if we have a logical framerate we could record/play demos by simply storing the pressed keys in each frame...

== SCons ==
We can just stay with jam for now. Compared to scons jam is at least faster and doesn't suffer from the problems below.
* '''H:''' add an install target - done (however scons is creating stupid .sconsign files at the install location :-/, see SConsignFile for possible fix)
* '''H:''' make sure compilation on win32 and cross-compilation works <br>
* '''M:''' improve opengl check to work on win32 and eventually more strange systems again <br>
* '''M:''' compile some test executables to test for SDL, SDL_mixer and SDL_image. Also test for version of SDL_mixer and SDL_image
* '''M:''' create a distclean target
* '''M:''' create a dist target
* '''M:''' add instructions to the README
* '''L:''' if all of the <b>H</b> and <b>M</b> issues are fixed, remove autoconf/automake<br>
* '''L:''' take a look if it is possible to make it a bit more quiet. (Similar to linux kernel, samba or jam output would be optimum, ie.
 C++ build/linux/src/bla.o
 C++ build/linux/src/blup.o
 C++ build/linux/src/error.o
 Error on line xx in error.o: This source contained an error
 g++ -Wall .... -o build/linux/src/error.o src/error.cpp

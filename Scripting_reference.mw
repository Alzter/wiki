__NOTOC__

Since May 2005, SuperTux sports a Squirrel scripting interface useful for level designers who want to add some interactive pep to their levels. This document poses as a reference article for those who want to explore the various objects of the SuperTux scripting model.

== What is Squirrel? ==
One of your first questions might be, "What does a rodent have to do with a penguin?" [http://squirrel.sourceforge.net/ Squirrel] is a language with a syntax not much unlike other C-like languages (C, C++, Java, ...). In the current implementation, it is integrated as elements in the SuperTux level and worldmap files. The [[Console]] is a full-fledged Squirrel interpreter as well.

== Squirrel, S-expr and SuperTux ==
I have no clue if the developers simply chose Squirrel just because the name so nicely integrates into the series of words "SuperTux" and "[[S-expr]]". Currently, the Squirrel code is integrated in string arguments of Scheme elements in SuperTux level files. (Whew.) This is an example code block inside a level:
<pre>(supertux-level
  (version 2)
  (name (_ "Go Blind"))
  (author "Team")
  (sector
    (name "main")
    (music "Annoying_penguin_gawking_sounds.ogg")

    ;; (Tilemaps, objects, whatever.)

    (init-script "
DisplayEffect.fade_out(2.5);
")
  )
)</pre>

When this level loads, the screen fades out completely during two and a half seconds right after the level is loaded. (Mind you, this would be a frustrating experience for the player if you add a horde of badguys near the spawn point.)

== Object reference ==
If you are interested in an object and what cans of worms you can open with it, this section is for you.

"(NYI)" after the function name symbolises functions that haven't been implemented yet. Calling them will result in a line being printed to standard output informing anybody who reads it that the script is using a function that actually doesn't exist. (You can expect Win32 users to happily ignore this, since they tend to simply start the application by opening it with Explorer. Unix users, on the other hand, like starting things from the [[Console]], so it's better if you don't use non-existent functions in your scripts.)

=== Classes ===

{| class="objectlist"
|colspan="2" class="title"| Classes
|-
! [[ScriptingGlobals | Globals]]
| This section contains all globally defined constants and functions
|-
! [[ScriptingPlayer | Player]]
| An object that is controlled by a (human) player
|-
! [[ScriptingDisplayEffect | DisplayEffect]]
| An object that does graphical effects on the whole screen
|-
! [[ScriptingCamera | Camera]]
| ...
|-
! [[ScriptingLevel | Level]]
| ...
|-
! [[ScriptingScriptedObject | ScriptedObject]]
| Object in a level than can be manipulated from scripts
|-
! [[ScriptingSound | Sound]]
| ...
|-
! [[ScriptingText | Text]]
| ...
|-
! [[ScriptingFloatingImage | FloatingImage]]
| ...
|-
|}

TODO: Convert the rest of the scripting docu to the new format (and improve format maybe?)

=== Global Constants ===
These constants can be accessed from anywhere in the game code.

==== KEY_BRASS ====
Type: integer

Value: <tt>1</tt>

Represents the brass key.

Used in: <tt>[[#add_key|add_key]]</tt> as argument 1

==== KEY_IRON ====
Type: integer

Value: <tt>2</tt>

Represents the iron key.

Used in: <tt>[[#add_key|add_key]]</tt> as argument 1

==== KEY_BRONZE ====
Type: integer

Value: <tt>4</tt>

Represents the bronze key.

Used in: <tt>[[#add_key|add_key]]</tt> as argument 1

==== KEY_SILVER ====
Type: integer

Value: <tt>8</tt>

Represents the silver key.

Used in: <tt>[[#add_key|add_key]]</tt> as argument 1

==== KEY_GOLD ====
Type: integer

Value: <tt>16</tt>

Represents the gold key.

Used in: <tt>[[#add_key|add_key]]</tt> as argument 1

==== ANCHOR_TOP ====
Type: integer

Value: <tt>16</tt>

Represents the top center anchor point.

Used in: [[#set_anchor_point|FloatingImage.set_anchor_point]] as argument 1<br/>
Returned by: [[#get_anchor_point|FloatingImage.get_anchor_point]]

==== ANCHOR_BOTTOM ====
Type: integer

Value: <tt>32</tt>

Represents the top center anchor point.

Used in: [[#set_anchor_point|FloatingImage.set_anchor_point]] as argument 1<br/>
Returned by: [[#get_anchor_point|FloatingImage.get_anchor_point]]

==== ANCHOR_LEFT ====
Type: integer

Value: <tt>1</tt>

Represents the top center anchor point.

Used in: [[#set_anchor_point|FloatingImage.set_anchor_point]] as argument 1<br/>
Returned by: [[#get_anchor_point|FloatingImage.get_anchor_point]]

==== ANCHOR_RIGHT ====
Type: integer

Value: <tt>2</tt>

Represents the top center anchor point.

Used in: [[#set_anchor_point|FloatingImage.set_anchor_point]] as argument 1<br/>
Returned by: [[#get_anchor_point|FloatingImage.get_anchor_point]]

==== ANCHOR_MIDDLE ====
Type: integer

Value: <tt>0</tt>

Represents the top center anchor point.

Used in: [[#set_anchor_point|FloatingImage.set_anchor_point]] as argument 1<br/>
Returned by: [[#get_anchor_point|FloatingImage.get_anchor_point]]

==== ANCHOR_TOP_LEFT ====
Type: integer

Value: <tt>17</tt>

Represents the top center anchor point.

Used in: [[#set_anchor_point|FloatingImage.set_anchor_point]] as argument 1<br/>
Returned by: [[#get_anchor_point|FloatingImage.get_anchor_point]]

==== ANCHOR_TOP_RIGHT ====
Type: integer

Value: <tt>18</tt>

Represents the top center anchor point.

Used in: [[#set_anchor_point|FloatingImage.set_anchor_point]] as argument 1<br/>
Returned by: [[#get_anchor_point|FloatingImage.get_anchor_point]]

==== ANCHOR_BOTTOM_LEFT ====
Type: integer

Value: <tt>33</tt>

Represents the top center anchor point.

Used in: [[#set_anchor_point|FloatingImage.set_anchor_point]] as argument 1<br/>
Returned by: [[#get_anchor_point|FloatingImage.get_anchor_point]]

==== ANCHOR_BOTTOM_RIGHT ====
Type: integer

Value: <tt>34</tt>

Represents the top center anchor point.

Used in: [[#set_anchor_point|FloatingImage.set_anchor_point]] as argument 1<br/>
Returned by: [[#get_anchor_point|FloatingImage.get_anchor_point]]

=== Global Functions ===
These global functions access basic or generic methods of SuperTux. They are called without an object name.

==== display ====
Usage: <tt>display(*** object)</tt>

Displays the string value of <tt>object</tt> in the [[Console]]. Object can be of any data type.

==== display_text_file ====
Usage: <tt>display_text_file(string filename)</tt>

Displays the SuperTux text file named <tt>filename</tt>. (The path is relative to the data root, e.g. "/home/joe/src/supertux-trunk/data")

See also: SuperTux file format reference, SuperTux texts

==== load_worldmap ====
Usage: <tt>load_worldmap(string filename)</tt>

Loads and runs the worldmap specified in <tt>filename</tt>. (The path is relative to the data root.)

==== load_level ====
Usage: <tt>load_level(string filename)</tt>

Loads and runs the level specified in <tt>filename</tt>. (The path is relative to the data root.)

==== wait ====
Usage: <tt>wait(float time)</tt>

Pauses execution of the Squirrel code for <tt>time</tt> seconds.

==== wait_for_screenswitch ====
Usage: <tt>wait_for_screenswitch()</tt>

Pauses execution of the Squirrel code until a new screen is displayed (e.g. menu &rarr; worldmap or worldmap &rarr; level).

==== exit_screen ====
Usage: <tt>exit_screen()</tt>

Exits the current screen, returning to the previous one or, if the active screen is the last one, exiting SuperTux.

==== translate ====
Usage: <tt>translate(string text)</tt>

Returns: translated <tt>string</tt>

Translates <tt>text</tt> into the user's locale.

Note: This construct is unfortunately not yet recognised by XGetText, so translation files have to be written manually.

==== import ====
Usage: <tt>import(string filename)</tt>

Imports and runs the Squirrel script <tt>filename</tt>. (The path is relative to the data root.)

==== save_status ====
Usage: <tt>save_status()</tt>

Dumps the current state into the user's save game file.

==== add_key ====
Usage: <tt>add_key(int key)</tt>

Adds or removes a key from the player's posession. <tt>key</tt> should be replaced with one of the <tt>KEY_</tt> constants.

See also: src/player_status.hpp

=== DisplayEffect ===
<tt>DisplayEffect</tt> is an interface for toying with the display. It has to be instantiated; for your convenience, SuperTux creates an instance named <tt>Effect</tt> when starting the scripting engine. Its usage is preferred.

==== fade_out ====
Usage: <tt>Effect.fade_out(float fadetime)</tt>

Gradually fades out the screen to black for the next <tt>fadetime</tt> seconds.

==== fade_in ====
Usage: <tt>Effect.fade_in(float fadetime)</tt>

Gradually fades in the screen from black for the next <tt>fadetime</tt> seconds.

==== set_black ====
Usage: <tt>Effect.set_black(bool black)</tt>

Blackens or un-blackens the screen (depending on the value of <tt>black</tt>).

==== is_black ====
Usage: <tt>Effect.is_black()</tt>

Returns: <tt>bool</tt>; has the screen been blackened by <tt>set_black</tt>?

Note: Calling <tt>fade_in</tt> or <tt>fade_out</tt> resets the return value to <tt>false</tt>.

==== sixteen_to_nine ====
Usage: <tt>Effect.sixteen_to_nine()</tt>

Sets the display ratio to 16:9, effectively adding black bars at the top and bottom of the screen. Should be used before cutscenes.

==== four_to_three ====
Usage: <tt>Effect.four_to_three()</tt>

Sets the display ratio to 4:3, removing the black bars added by <tt>sixteen_to_nine()</tt>. Should be used after cutscenes.

=== Camera ===
<tt>Camera</tt> is an interface to manipulate the camera.

==== shake (NYI) ====
Usage: <tt>Camera.shake(float time, float x, float y)</tt>

Warning: This function has not yet been implemented.

==== set_pos (NYI) ====
Usage: <tt>Camera.set_pos(float x, float y)</tt>

Warning: This function has not yet been implemented.

==== set_mode ====
Usage: <tt>Camera.set_mode(string modestring)</tt>

This function sets the camera mode. Valid values for <tt>modestring</tt> are <tt>"normal"</tt> and <tt>"manual"</tt>.

==== scroll_to (NYI) ====
Usage: <tt>Camera.scroll_to(float x, float y, float time)</tt>

Scrolls the camera to (<tt>x</tt>, <tt>y</tt>) within <tt>time</tt> seconds.

=== Level ===
The <tt>Level</tt> class provides basic controlling functions for the current level.

==== finish ====
Usage: <tt>Level.finish(bool win)</tt>

Ends the current level. If you set <tt>win</tt> to <tt>true</tt>, the level is marked as completed if launched from a worldmap.

Tip: Very useful if you have created a frustrating level and want to, at some point, save the player from agony.

==== spawn ====
Usage: <tt>Level.spawn(string sectorname, string spawnpointname)</tt>

Respawns Tux in the sector <tt>sectorname</tt> at the <tt>spawnpointname</tt> spawnpoint.

Exceptions: If <tt>sectorname</tt> or <tt>spawnpointname</tt> are empty or the specified sector does not exist, the function will bail out first chance it gets. If the specified spawnpoint doesn't exist, Tux will be spawned at the spawnpoint named <tt>main</tt>. If this spawnpoint doesn't exist either, Tux will simply end up at the origin (top-left 0, 0).

==== flip_vertically ====
Usage: <tt>Level.flip_vertically()</tt>

Flips the level vertically (i.e. top is now bottom and vice versa). Call again to revert the effect.

Tip: Make sure the player can land on something after the level is flipped!

=== Sound ===
This class provides a very simple interface to the audio subsystem.

==== play_music ====
Usage: <tt>Sound.play_music(string track_name)</tt>

Plays the selected music track (automatically prepending the path to the music folder and appending the <tt>.ogg</tt> extension).

==== play ====
Usage: <tt>Sound.play(string sound_name)</tt>

Plays the sound specified in <tt>sound_name</tt> (that is identical to the filename of the sound without the <tt>.wav</tt> extension).

=== Text ===
This module provides access to methods reponsible for displaying text on-screen.

==== set_text ====
Usage: <tt>Text.set_text(string text)</tt>

Sets the text string to be displayed to <tt>text</tt>.

==== set_font ====
Usage: <tt>Text.set_font(string font)</tt>

Sets the font of the text to be displayed to <tt>text</tt>. Currently valid values are <tt>gold</tt>, <tt>white</tt>, <tt>blue</tt>, <tt>gray</tt>, <tt>big</tt> and <tt>small</tt>.

==== fade_in ====
Usage: <tt>Text.fade_in(float time)</tt>

Fades in the specified text for the next <tt>time</tt> seconds.

==== fade_out ====
Usage: <tt>Text.fade_out(float time)</tt>

Just the opposite of <tt>fade_out</tt>.

==== set_visible ====
Usage: <tt>Text.set_visible(bool visible)</tt>

Shows or hides the text abruptly (drastic counterpart to <tt>fade_in</tt> and <tt>fade_out</tt>).

==== set_centered ====
Usage: <tt>Text.set_centered(bool centered)</tt>

If <tt>centered</tt> is <tt>true</tt>, the text will be centered on the screen. Otherwise, it will be left-aligned.

=== Player ===
This module contains methods controlling the player. (No, SuperTux doesn't use mind control. Player refers to the type of the player object.)

'''Once again, just like with ScriptedObject, note that <tt>Player</tt> is only the object type. Since SuperTux is currently single-player only, use <tt>Tux</tt> to make changes to the player object, such as <tt>Tux.deactivate()</tt>.'''

==== add_bonus ====
Usage: <tt>&lt;player&gt;.add_bonus(string bonusname)</tt>

Gives Tux the specified bonus. Replace <tt>bonusname</tt> with either of <tt>"grow"</tt>, <tt>"fireflower"</tt> or <tt>"iceflower"</tt>.

==== add_coins ====
Usage: <tt>&lt;player&gt;.add_coins(int number)</tt>

Gives Tux <tt>number</tt> coins.

Tip: Tux has to pay 25 coins to be revived at the last firefly he visited. If he doesn't have enough coins, the player has to play the whole level again.

==== make_invincible ====
Usage: <tt>&lt;player&gt;.make_invincible(float time)</tt>

Makes the player invincible for either a custom or a predefined amount of time.

See also: <tt>TUX_INVINCIBLE_TIME</tt> in src/object/player.hpp for the amount of seconds that the player becomes invincible in case <tt>time</tt> is not specified.

==== deactivate ====
Usage: <tt>&lt;player&gt;.deactivate()</tt>

Stops the player and blocks the movement controls.

Tip: Don't call this in front of a horde of badguys.

==== activate ====
Usage: <tt>&lt;player&gt;.activate()</tt>

Reactivates the player's movement controls.

==== walk ====
Usage: <tt>&lt;player&gt;.walk(float velocity)</tt>

Makes the player move in a certain horizontal velocity (specified by <tt>velocity</tt>). A negative velocity moves the player to the left.

==== set_visible ====
Usage: <tt>&lt;player&gt;.set_visible(bool visible)</tt>

Shows or hides Tux according to the value of <tt>visible</tt>.

==== get_visible ====
Usage: <tt>&lt;player&gt;.get_visible()</tt>

Returns: <tt>bool</tt>; is Tux visible?

=== FloatingImage ===
The FloatingImage class contains methods for handling an image floating in mid-air, such as the SuperTux logo.

==== Constructor ====
Usage: <tt>&lt;floatimage&gt; &lt;- FloatingImage(string filename)</tt>

Creates a FloatingImage from <tt>filename</tt> (which is relative to the data root).

==== set_layer ====
Usage: <tt>&lt;floatimage&gt;.set_layer(int layer)</tt>

Puts the image on <tt>layer</tt>.

See also: src/video/drawing_context.hpp for the predefined layers and their values (note that you can't use these constants in your Squirrel code).

==== set_layer ====
Usage: <tt>&lt;floatimage&gt;.get_layer()</tt>

Returns: <tt>int</tt>; the layer the floating image is on.

==== set_pos ====
Usage: <tt>&lt;floatimage&gt;.set_pos(float x, float y)</tt>

Move the image in relation to the current anchor point.

==== get_pos_x ====
Usage: <tt>&lt;floatimage&gt;.get_pos_x()</tt>

Get the image's X coordinate relative to the current anchor point.

==== get_pos_y ====
Usage: <tt>&lt;floatimage&gt;.get_pos_y()</tt>

Get the image's Y coordinate relative to the current anchor point.

==== set_anchor_point ====
Usage: <tt>&lt;floatimage&gt;.set_anchor_point(int anchorpt)</tt>

Set the image's anchor point. Possible values are represented by the ANCHOR_* constants.

==== get_anchor_point ====
Usage: <tt>&lt;floatimage&gt;.get_anchor_point()</tt>

Returns: <tt>int</tt>; the current anchor point

==== set_visible ====
Usage: <tt>&lt;floatimage&gt;.set_visible(bool visible)</tt>

Set the image visibility according to <tt>visible</tt>.

==== get_visible ====
Usage: <tt>&lt;floatimage&gt;.get_visible()</tt>

Returns: <tt>bool</tt>; is the image visible?

The level format is a bit complex, which is why [http://flexlay.berlios.de/ Flexlay] can prove itself very useful as an editor. If you are interested in how the levels look like or want to edit them manually (and find some of the parameters not self-explanatory enough), then you may read or skim through this section.
<pre>;; Generated by Flexlay Editor (or Emacs or Vi or whatever)
(supertux-level                       ;; This initiates a level.

  (version 2)                         ;; This document only describes version 2. Version 1 is deprecated
                                      ;; and I'm not going to teach it since it lacks a lot of features.

  (name (_ "Some demo level"))        ;; Name of the level. Call it a nice name. Note that this should be
                                      ;; internationalised (that's why the extra underscore and brackets).

  (author "Ondra Hosek")              ;; Put your name here unless you are me (very improbable)

  (sector                             ;; A level is divided into independent sectors that can be connected
                                      ;; by doors.

    (name "main")                     ;; Tux begins in the sector named "main".

    (music "ondraschipdisko.ogg")     ;; Name of the music file. See the data/music/ directory.

    (gravity 10.0)                    ;; Gravity of Tux. 10.0 is the default and sanest value (unless you
                                      ;; are ready to apply the level design correctly).

    (tilemap                          ;; Here come the tiles.
      (layer "background")            ;; Currently, there are three layer types: "background",
                                      ;; "interactive" and "foreground".

      (solid  #f)                     ;; Will Tux collide with tiles in this tilemap?
                                      ;; Note: only one tilemap can be solid per sector.

      (speed  1.0)                    ;; If the tilemap is solid, this has to be 1. Basically sets how
                                      ;; fast the tilemap scrolls.

      (width  5)                      ;; Number of tiles you plan to put in a row...
      (height 5)                      ;; ... and in a column. (5x5 is pretty tiny; small Tux
                                      ;; takes up 1x1 tiles, big Tux 1x2 tiles).

      (tiles                          ;; Integer lists of which tiles you want to use.
        0 0 0 0 0                     ;; The tiles and their numbers are defined in
        0 0 0 0 0                     ;; data/images/tiles.strf.
        0 0 0 0 0
        0 0 0 0 0
        0 0 0 0 0
      )
    )
    (tilemap
      (layer "interactive")
      ;; See the background layer definition.
    )
    (tilemap
      (layer "foreground")
      ;; ...
    )

    (camera                           ;; Definitions of the camera paths

      (mode "autoscroll")             ;; This can be set to "normal" to deactivate
                                      ;; forced scrolling. Then you can omit the
                                      ;; "path" directive.

      (path                           ;; Forced scrolling path

        (point (x 2) (y 3) (speed 2)) ;; Point to which camera will scroll.

        (point
          ;; ...
        )
      )

      (backscrolling #f)              ;; You can prevent the camera from scrolling
                                      ;; backwards with this setting. Applies only
                                      ;; to the normal camera mode.
    )

    (background
      (image "ocean.jpg")             ;; Background from data/images/background
      (speed 0.5)                     ;; Scrolling speed
    )

    (spawnpoint                       ;; A spawning point for Tux. By default, he is
      (name "main")                   ;; spawned at spawnpoint named "main".
      (x 0)
      (y 0)
    )

    ;; THE FOLLOWING OBJECTS ARE OPTIONAL.
    (init-script "
// A Squirrel script
// See the scripting reference for more information.
")

    ;; Here you can add badguys of your choice.
    ;; Details on this can be read later in this chapter.

    ;; Particle systems
    ;; It is advisable only to use one particle system at a time.

    (particles-&lt;type&gt;                 ;; Valid values for &lt;type&gt; are rain, snow and clouds

      (layer 201)                     ;; -100 are background, 0 are interactive, 200 are foreground tiles.
                                      ;; Choose a number to put the rain between two layers. In this case,
                                      ;; the rain is in front of the foreground tiles. (see also
                                      ;; src/video/drawing_context.hpp)
    )

    (leveltime

      (time 300)                      ;; The player must complete this level
                                      ;; within 300 seconds.
    )
  ) ;; End of sector

  ;; You can add other sectors here.
)
;; End of level</pre>

=== Badguys ===
This section describes the various badguys and their parameters.

The next few sections describe the extra parameters for the other badguys.

==== Common parameters ====
<pre>(&lt;badguy-name&gt;
  (x 270)                 ;; The badguy's X coordinate.
  (y 126)                 ;; The badguy's Y coordinate. (Note that the origin is in the top-left corner!)
  (stay-on-platform #f)   ;; Optional. Should the badguy do its best not to fall from the platform it's on? (NYI)
)
</pre>

Bouncing Snowballs, Flying Snowballs, Jumpies, Mr Bombs, Mr Iceblocks, Mr Rockets, Mr Trees, World 1 Noloks, Poison Ivies, Snowballs, Spikies, Stalactites, Yeti Stalactites and Zeeklings only require this list of parameters. Simply substitute <tt><badguy-name></tt> with one of the following:

*<tt>bouncingsnowball</tt>
*<tt>flyingsnowball</tt>
*<tt>jumpy</tt>
*<tt>mrbomb</tt>
*<tt>mriceblock</tt>
*<tt>mrrocket</tt>
*<tt>mrtree</tt>
*<tt>nolok_01</tt>
*<tt>poisonivy</tt>
*<tt>snowball</tt>
*<tt>snowsnail</tt>
*<tt>spidermite</tt>
*<tt>spiky</tt>
*<tt>stalactite</tt>
*<tt>yeti_stalactite</tt>
*<tt>zeekling</tt>

==== Dispenser ====
<pre>(dispenser
  (cycle 3)               ;; How often should a badguy be dispensed?
  
  (badguy random)         ;; Valid values are "snowball", "bouncingsnowball", "mrbomb",
                          ;; "mriceblock", "mrrocket", "poisonivy", "snowsnail", or "random".
)</pre>

==== Flame ====
<pre>(flame
  (radius 3)              ;; How big should the radius of the circle be that the flame
                          ;; follows?
  
  (speed 10)              ;; How fast should the flame be?
)</pre>

==== Lightning orb ====
The lighting orb ("kugelblitz") ignores the <tt>y</tt> coordinate, spawning above the visible screen.

==== Spike ====
Don't mistake this badguy for Spiky! Spiky is the snowball-like creature with spikes, whilst a spike is an object serving the same purpose like the stalactite.

<pre>(spike
  (direction 2)           ;; 0: north, 1: south, 2: west, 3: east
)</pre>

==== Yeti ====
<pre>(yeti
  (dead-script "
// A squirrel script that is executed once the Yeti dies.
")
)</pre>

[[Category:Game Engine]]
